import time
import pandas as pd
import numpy as np
import calendar as cal

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')

    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs

    city = input("Which city do you want to explore? Chicago, New York City, or Washinton:").lower()

    if city in ['chicago', 'new york city', 'washington']:
        overview = pd.read_csv(CITY_DATA[city])
        print('Here are the first 5 rows from',city, ':\n', overview.head(5))
    while city not in ['chicago', 'new york city', 'washington']:
        print('Invalid Selection')
        city = input("Please Select one of the city between Chicago, New York City or Washington again: ").lower()
        overview = pd.read_csv(CITY_DATA[city])
        print('Here are the first 5 rows from',city, ':\n', overview.head(5))

    # TO DO: get user input for month (all, january, february, ... , june)

    month = input("Please Select the month between January to June or all: ").lower()
    while month not in ['january', 'february', 'march', 'april', 'may', 'june', 'all']:
        print('Invalid Selection')
        month = input("Please Select the month between January to June again: ").lower()



    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)

    day = input("Please Select the day of the week or all: ").lower()
    while day not in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', 'all']:
        print('Invalid Selection')
        day = input("Please Select the day of the week again: ").lower()

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
        # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])

        # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

        # extract month day and hour of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    df['hour'] = df['Start Time'].dt.hour

 # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\n  Calculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    popular_month = df['month'].mode()[0]
    print('Most Common Month:', popular_month)

    # TO DO: display the most common day of week
    popular_day = df['day_of_week'].mode()[0]
    print('Most Common Day:', popular_day)

    # TO DO: display the most common start hour
    popular_hour = df['hour'].mode()[0]
    print('Most Common Hour:', popular_hour)

    print("\n  This took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\n  Calculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    popular_start_station = df['Start Station'].mode()[0]
    print('Most commonly used start station:', popular_start_station)

    # TO DO: display most commonly used end station
    popular_end_station = df['End Station'].mode()[0]
    print('Most commonly used end station :', popular_end_station)

    # TO DO: display most frequent combination of start station and end station trip
    df['start end station'] = df['Start Station'] + ' and ' + df['End Station']
    popular_start_end_station = df['start end station'].mode()[0]
    print('Most frequent combination of start station and end station trip :', popular_start_end_station)

    print("\n  This took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\n  Calculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_travel_time = df['Trip Duration'].sum()
    print('Total travel time : ', total_travel_time, 'seconds.')

    # TO DO: display mean travel time
    mean_travel_time = df['Trip Duration'].mean()
    print('Mean of travel time : ', mean_travel_time, 'seconds.')

    print("\n  This took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\n  Calculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    counts_user_types = df['User Type'].value_counts()

    print('Counts of user types:\n', counts_user_types, '\n')

    # TO DO: Display counts of gender
    if 'Gender' in df.columns:
        counts_gender = df['Gender'].value_counts()
        print('Counts of gender:\n', counts_gender, '\n')
    else:
        print('There is no information in Gender')

    # TO DO: Display earliest, most recent, and most common year of birth
    if 'Birth Year' in df.columns:
        earliest_yob = int(df['Birth Year'].min())
        most_recent_yob = int(df['Birth Year'].max())
        most_common_yob = int(df['Birth Year'].mode())
        print('Earliest year of birth: ', earliest_yob)
        print('Most recent year of birth: ', most_recent_yob)
        print('Most common year of birth: ', most_common_yob)
    else:
        print('There is no information for year of birth')

        print("\n This took %s seconds." % (time.time() - start_time))
        print('-'*40)

    # TO DO: Ask if the user would like to see more rows of data from the filtered dataset.
    # Display 5 rows, then ask if they would like to see 5 more rows
    # Contine asking until the user says No

    show_rows = 5
    rows_start = 0
    rows_end = show_rows -1

    print('\n  Would you like to view more data from the current dataset?')
    while True:
        raw_data = input('  (y or n)   ')
        if raw_data.lower() == 'y':
            print('\n  Displaying rows {} to {}:'.format(rows_start + 1, rows_end + 1))

            print('\n , df.iloc[rows_start : rows_end + 1 ])
                  rows_start += show_rows
                  rows_end += show_rows

            print('\n  Would you like to see the next {} rows?'.format(show_rows))
            continue
        else:
            break

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\n  Would you like to restart? Enter yes or no.\n ')
        if restart.lower() != 'yes':
            break

if __name__ == "__main__":
	    main()
